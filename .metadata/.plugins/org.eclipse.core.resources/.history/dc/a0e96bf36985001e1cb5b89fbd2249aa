package com.shoplaptop.dao;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.shoplaptop.entity.HoaDon;
import com.shoplaptop.entity.PhieuDoi;
import com.shoplaptop.utils.XJdbc;

public class PhieuDoiDAO implements ShopLaptop365DAO<PhieuDoi, String>{
		
	String Insert_PhieuDoi = "INSERT dbo.PhieuDoi(MaPhieuDoi,MaKH,MaHD,NgayTao,LiDo)VALUES(?,?,?,?,?)";
	String Insert_CTPhieuDoi = "INSERT dbo.CTPhieuDoi(ID_PhieuDoi,ID_Serial_Old,ID_Serial_New)VALUES(?,?,? )";
	String Update_PhieuDoi = "UPDATE dbo.PhieuDoi SET NgayTao = ?, LiDo = ? WHERE MaPhieuDoi = ?";
	String Update_CTPhieuDoi ="UPDATE dbo.CTPhieuDoi SET ID_Serial_New = ? WHERE ID_PhieuDoi = ?";
	String Delete_SQL = "DELETE FROM dbo.PhieuDoi WHERE MaPhieuDoi = ?";
	String SelectPhieuDoi_SQL = "SELECT * FROM dbo.PhieuDoi";
//	String SelectCTPhieuDoi_SQL = "SELECT * FROM dbo.CTPhieuDoi";
	String selectCTPhieuDoi = "SELECT PhieuDoi.ID, SerialNumber AS 'SerialNumber_Old', SerialNumber AS 'SerialNumber_New'  \r\n"
			+ "FROM dbo.PhieuDoi JOIN dbo.CTPhieuDoi ON CTPhieuDoi.ID_PhieuDoi = PhieuDoi.ID JOIN dbo.Serial ON Serial.ID = CTPhieuDoi.ID_Serial_Old \r\n"
			+ "WHERE dbo.PhieuDoi.MaPhieuDoi = ?";
	
	
	@Override
	public String insert(PhieuDoi phieuDoi) {
		try {
			XJdbc.update(Insert_PhieuDoi, phieuDoi.getMaPhieuDoi(),phieuDoi.getMaKH(),phieuDoi.getMaHD(),phieuDoi.getNgayTao(),phieuDoi.getLiDo());
			
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return null;
	}
	
	public String insert1(PhieuDoi phieuDoi) {
		try {
			XJdbc.update(Insert_CTPhieuDoi,phieuDoi.getID(), phieuDoi.getSerialOld(),phieuDoi.getSerialNew());
			
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return null;
	}
	
	@Override
	public String update(PhieuDoi phieuDoi) {
		try {
			XJdbc.update(Update_PhieuDoi, phieuDoi.getNgayTao(), phieuDoi.getLiDo(),phieuDoi.getMaPhieuDoi() );
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return null;
	}
	
	public String update1(PhieuDoi phieuDoi) {
		try {
			XJdbc.update(Update_CTPhieuDoi, phieuDoi.getSerialNew(),phieuDoi.getID() );
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return null;
	}
	
	@Override
	public String delete(String MaPhieuDoi) {
		try {
			XJdbc.update(Delete_SQL, MaPhieuDoi);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return null;
	}
	String selectPhieuDoi = "SELECT * FROM dbo.PhieuDoi where MaPhieuDoi = ?";
	@Override
	public PhieuDoi selectById(String MaPhieuDoi) {
		List<PhieuDoi> list = this.selectBySQL(selectPhieuDoi, MaPhieuDoi);
		if (list.isEmpty()) {
			return null;
		}
		return list.get(0);
	}

	@Override
	public List<PhieuDoi> selectAll() {
		return this.selectBySQL(SelectPhieuDoi_SQL);
	}
	
	@Override
	public List<PhieuDoi> selectBySQL(String sql, Object... args) {
		List<PhieuDoi> list = new ArrayList<PhieuDoi>();
		try {
			ResultSet rs = XJdbc.query(sql, args);
			while(rs.next()) {
				PhieuDoi phieuDoi = new PhieuDoi();
				phieuDoi.setMaPhieuDoi(rs.getString("MaPhieuDoi"));
				phieuDoi.setMaKH(rs.getString("MaKH"));
				phieuDoi.setMaHD(rs.getString("MaHD"));
				phieuDoi.setMaNV(rs.getString("MaNV"));
				phieuDoi.setNgayTao(rs.getDate("NgayTao"));
				phieuDoi.setLiDo(rs.getString("LiDo"));
				list.add(phieuDoi);				
			}
			rs.getStatement().getConnection().close();
			return list;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	public List<PhieuDoi> selectCTPhieuDoi(String maPhieuDoi) {
		return this.selectBySQLCTPhieuDoi(selectCTPhieuDoi, maPhieuDoi);
	}
	
	public List<PhieuDoi> selectBySQLCTPhieuDoi(String sql, Object... args) {
		List<PhieuDoi> list = new ArrayList<PhieuDoi>();
		try {
			ResultSet rs = XJdbc.query(sql, args);
			while(rs.next()) {
				PhieuDoi phieuDoi = new PhieuDoi();
				phieuDoi.setID(rs.getInt("ID"));
				phieuDoi.setSerial_Old(rs.getString("SerialNumber_Old"));
				phieuDoi.setSerial_New(rs.getString("SerialNumber_New"));
				list.add(phieuDoi);				
			}
			rs.getStatement().getConnection().close();
			return list;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		
	}
	
	
	
}
